{"version":3,"file":"static/js/7458.5cdbbb2e.chunk.js","mappings":"6NA8BA,UA3BA,SAAmBA,GACjB,IAAQC,EAAuCD,EAAvCC,OAAQC,EAA+BF,EAA/BE,KAAMC,EAAyBH,EAAzBG,YAAgBC,GAAIC,EAAAA,EAAAA,GAAKL,EAAKM,GAEhDC,GAAQ,EACRC,EAAa,GAEbL,IACFI,GAAQ,EACRC,EAAaL,GAGXF,IACFM,EAASN,GAAUA,EAAOQ,IAAIP,KAAU,EACxCM,EAAcP,GAAUA,EAAOS,MAAMR,IAAU,IAGjD,IAAMS,GAAUC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACdL,MAAAA,EACAL,KAAAA,EACAM,WAAAA,GACGJ,GAAI,IACPS,MAAOT,EAAKS,OAAS,KAGvB,OAAOC,EAAAA,EAAAA,KAACC,EAAAA,GAASH,EAAAA,EAAAA,GAAA,CAACI,KAAK,QAAQC,QAAQ,YAAeN,GACxD,C,mFC1Be,SAASO,EAAkBC,EAAQC,EAASC,GACzD,MAAe,YAAXF,EACKG,EAAAA,GAAAA,QAAcF,EAASC,GAEzBC,EAAAA,GAAAA,MAAYF,EAASC,EAC9B,C,yGCJe,SAASE,IACtB,OACET,EAAAA,EAAAA,KAACU,EAAAA,GAAc,CACbC,SAAS,YACTC,UAAW,IACXC,iBAAiB,EACjBC,aAAa,EACbC,cAAY,EACZC,KAAK,EACLC,kBAAgB,EAChBC,WAAS,EACTC,cAAY,EACZC,MAAM,WAGZ,C,qEClBO,IAAMb,EAAU,CACrBI,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBK,WAAW,EACXG,mBAAoB,EACpBC,iBAAkB,GAClBF,MAAO,U,sOCUHG,EAAQ,CACZZ,SAAU,WACVa,IAAK,MACLC,KAAM,MACNC,UAAW,wBACXC,MAAO,CAAEC,GAAI,MAAOC,GAAI,OACxBC,QAAS,mBACTC,OAAQ,iBACRC,UAAW,GACXC,EAAG,GAGCC,EAAY,IAAIC,EAAAA,GAAAA,UAAsB,CAC1CC,OAAQ,uBACRC,QAAS,4BAGLC,EAAS,CACb,EAAG,UACH,EAAG,OACH,EAAG,KACH,EAAG,OACH,EAAG,YACH,EAAG,aAGCC,EAAe,SAACxC,GACpB,MAAM,GAANyC,OAAUzC,EAAK,SAAAyC,OAAkB,IAAVzC,EAAc,IAAM,GAAE,MAAAyC,OAAKF,EAAOvC,GAC3D,EAoKA,UAlKA,SAAsBb,GACpB,IAAQuD,EAAuDvD,EAAvDuD,KAAMC,EAAiDxD,EAAjDwD,YAAaC,EAAoCzD,EAApCyD,YAAaC,EAAuB1D,EAAvB0D,UAAWC,EAAY3D,EAAZ2D,QAGnDC,IAFiBC,EAAAA,EAAAA,MAESC,EAAAA,SAAe,OAAKC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAAvCrD,EAAKwD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,EAA8BJ,EAAAA,SAAe,CAC3CK,OAAQ,CACNjB,OAAQ,EACRC,QAAS,IAEXlD,OAAQ+C,EAAU/C,SAClBmE,GAAAJ,EAAAA,EAAAA,GAAAE,EAAA,GANKG,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAO1BG,EAA0BT,EAAAA,UAAgB,GAAEU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAArCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAEtBV,EAAAA,WAAgB,WACVN,GACFc,GAAW,SAACK,GAAI,OAAA/D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACX+D,GAAI,IACPR,QAAMvD,EAAAA,EAAAA,GAAA,GACD4C,IACJ,GAGP,GAAG,CAACA,IAEJ,IAAMoB,EAAe,SAACC,GACpB,IAAM3E,EAAO2E,EAAEC,OAAO5E,KAChBW,EAAQgE,EAAEC,OAAOjE,MAEvByD,GAAW,SAACK,GAAI,OAAA/D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACX+D,GAAI,IACPR,QAAMvD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACD+D,EAAKR,QAAM,IAAAY,EAAAA,EAAAA,GAAA,GACb7E,EAAOW,KACT,IAGU,WAATX,GAEA+D,EADEpD,GAAS,EACF,sBAEA,MAIb,IAAQZ,EAAW+C,EAAX/C,OAER+C,EAAUgC,SAAS9E,EAAMW,GAAOoE,MAAK,SAACC,GAC/BA,GACHZ,GAAW,SAACK,GAAI,OAAA/D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACX+D,GAAI,IACP1E,OAAQA,GAAM,GAGpB,GACF,EAoBA,OACEkF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAC,SAAA,EACFvE,EAAAA,EAAAA,KAACS,EAAAA,QAA0B,KAC3BT,EAAAA,EAAAA,KAACwE,EAAAA,EAAK,CACJ/B,KAAMA,EACNgC,QAAS9B,EACT,kBAAgB,oBAChB,mBAAiB,0BAAyB4B,UAE1CF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACI,GAAInD,EAAMgD,SAAA,EACbF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFI,GAAI,CACFC,gBAAiB,UACjB1C,EAAG,EACH2C,aAAc,EACd5C,UAAW,GACXuC,SAAA,EAEFvE,EAAAA,EAAAA,KAAC6E,EAAAA,EAAU,CAACH,GAAI,CAAEI,GAAI,EAAGC,SAAU,GAAIC,WAAY,QAAST,SAAC,YAG7DF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAAC,SAAA,EACFF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACI,GAAI,CAAEI,GAAI,GAAIP,SAAA,EACjBF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACI,GAAI,CAAEO,QAAS,QAASV,SAAA,EAC3BvE,EAAAA,EAAAA,KAACkF,EAAAA,EAAM,CACL9F,KAAK,SACLW,MAAOoF,SAAS5B,EAAQF,OAAOjB,QAC/BgD,SAAUtB,EACVvB,aAAcA,EACd8C,eAAgB,SAACC,EAAOC,GACtB3B,EAAS2B,EACX,KAEFvF,EAAAA,EAAAA,KAAC6E,EAAAA,EAAU,CAACH,GAAI,CAAEc,GAAI,GAAIjB,SACvBjC,GAAkB,IAAXqB,EAAeA,EAAQJ,EAAQF,OAAOjB,cAGlDpC,EAAAA,EAAAA,KAACyF,EAAAA,EAAc,CAAChG,OAAK,EAACiF,GAAI,CAAEc,GAAI,GAAIjB,SACjC9E,QAGLO,EAAAA,EAAAA,KAAC0F,EAAAA,QAAS,CACRC,WAAS,EACTvG,KAAK,UACLwG,MAAM,UACNC,YAAY,sBACZC,WAAS,EACTC,KAAM,EACNhG,MAAOwD,EAAQF,OAAOhB,QACtB+C,SAAUtB,EACV3E,OAAQoE,EAAQpE,gBAKtBkF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACF0B,MAAM,QACNtB,GAAI,CAAEC,gBAAiB,UAAW1C,EAAG,EAAG2C,aAAc,EAAGqB,GAAI,GAAI1B,SAAA,EAEjEvE,EAAAA,EAAAA,KAACkG,EAAAA,EAAM,CAAChG,KAAK,QAAQC,QAAQ,WAAWgG,QAASxD,EAAY4B,SAAC,YAG9DvE,EAAAA,EAAAA,KAACkG,EAAAA,EAAM,CACLhG,KAAK,QACLC,QAAQ,YACRiG,MAAM,UACN1B,GAAI,CAAEc,GAAI,GACVW,QArFW,WACrBjE,EAAUmE,YAAY9C,EAAQF,QAAQc,MAAK,SAACC,GACtCb,EAAQF,OAAOjB,QAAU,GAC3Be,EAAS,wBACT/C,EAAAA,EAAAA,SAAkB,QAASX,EAAOc,EAAAA,UAE9B6D,EACFxB,EAAUW,EAAQF,QAElBG,GAAW,SAACK,GAAI,OAAA/D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACX+D,GAAI,IACP1E,OAAQ+C,EAAU/C,QAAM,GAIhC,GACF,EAsEYmH,SAAUzD,EAAQ0B,SAEjB1B,GACC7C,EAAAA,EAAAA,KAACuG,EAAAA,EAAgB,CACfrG,KAAM,GACNwE,GAAI,CAAE0B,MAAO,SACbI,UAAW,IAGb,mBAQhB,C","sources":["components/FormField.js","components/ToastNotification.js","components/ToastNotificationContainer.js","components/options.js","modules/users/components/UpdateReview.js"],"sourcesContent":["import { TextField } from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\nfunction FormField(props) {\r\n  const { errors, name, customError, ...rest } = props;\r\n\r\n  let error = false;\r\n  let helperText = \"\";\r\n\r\n  if (customError) {\r\n    error = true;\r\n    helperText = customError;\r\n  }\r\n\r\n  if (errors) {\r\n    error = (errors && errors.has(name)) || false;\r\n    helperText = (errors && errors.first(name)) || \"\";\r\n  }\r\n\r\n  const fieldProps = {\r\n    error,\r\n    name,\r\n    helperText,\r\n    ...rest,\r\n    value: rest.value || \"\",\r\n  };\r\n\r\n  return <TextField size=\"small\" variant=\"outlined\" {...fieldProps} />;\r\n}\r\n\r\nexport default FormField;\r\n","import { toast } from \"react-toastify\";\r\n\r\nexport default function ToastNotification(status, message, options) {\r\n  if (status === \"success\") {\r\n    return toast.success(message, options);\r\n  }\r\n  return toast.error(message, options);\r\n}\r\n","import { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nexport default function ToastNotificationContainer() {\r\n  return (\r\n    <ToastContainer\r\n      position=\"top-right\"\r\n      autoClose={5000}\r\n      hideProgressBar={false}\r\n      newestOnTop={false}\r\n      closeOnClick\r\n      rtl={false}\r\n      pauseOnFocusLoss\r\n      draggable\r\n      pauseOnHover\r\n      theme=\"colored\"\r\n    />\r\n  );\r\n}\r\n","export const options = {\r\n  position: \"top-right\",\r\n  autoClose: 3000,\r\n  hideProgressBar: false,\r\n  draggable: true,\r\n  draggableDirection: \"x\" | \"y\",\r\n  draggablePercent: 60,\r\n  theme: \"colored\",\r\n};\r\n","import {\r\n  Box,\r\n  Button,\r\n  CircularProgress,\r\n  FormHelperText,\r\n  Modal,\r\n  Rating,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport React from \"react\";\r\nimport FormField from \"../../../components/FormField\";\r\nimport Reevalidate from \"ree-validate-18\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport ToastNotification from \"../../../components/ToastNotification\";\r\nimport { options } from \"../../../components/options\";\r\nimport ToastNotificationContainer from \"../../../components/ToastNotificationContainer\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: { xs: \"90%\", md: \"60%\" },\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nconst validator = new Reevalidate.Validator({\r\n  rating: \"required|min:1|max:5\",\r\n  comment: \"required|min:50|max:500\",\r\n});\r\n\r\nconst labels = {\r\n  0: \"Useless\",\r\n  1: \"Poor\",\r\n  2: \"Ok\",\r\n  3: \"Good\",\r\n  4: \"Very Good\",\r\n  5: \"Excellent\",\r\n};\r\n\r\nconst getLabelText = (value) => {\r\n  return `${value} Star${value !== 1 ? \"s\" : \"\"}, ${labels[value]}`;\r\n};\r\n\r\nfunction UpdateReview(props) {\r\n  const { open, ratingsData, handleClose, onConfirm, loading } = props;\r\n  const dispatch = useDispatch();\r\n\r\n  const [error, setError] = React.useState(null);\r\n  const [reviews, setReviews] = React.useState({\r\n    values: {\r\n      rating: 0,\r\n      comment: \"\",\r\n    },\r\n    errors: validator.errors,\r\n  });\r\n  const [hover, setHover] = React.useState(-1);\r\n\r\n  React.useEffect(() => {\r\n    if (ratingsData) {\r\n      setReviews((prev) => ({\r\n        ...prev,\r\n        values: {\r\n          ...ratingsData,\r\n        },\r\n      }));\r\n    }\r\n  }, [ratingsData]);\r\n\r\n  const handleChange = (e) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n\r\n    setReviews((prev) => ({\r\n      ...prev,\r\n      values: {\r\n        ...prev.values,\r\n        [name]: value,\r\n      },\r\n    }));\r\n\r\n    if (name === \"rating\") {\r\n      if (value <= 0) {\r\n        setError(\"Rating is required!\");\r\n      } else {\r\n        setError(null);\r\n      }\r\n    }\r\n\r\n    const { errors } = validator;\r\n\r\n    validator.validate(name, value).then((success) => {\r\n      if (!success) {\r\n        setReviews((prev) => ({\r\n          ...prev,\r\n          errors: errors,\r\n        }));\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleValidate = () => {\r\n    validator.validateAll(reviews.values).then((success) => {\r\n      if (reviews.values.rating <= 0) {\r\n        setError(\"Rating is required!\");\r\n        ToastNotification(\"error\", error, options);\r\n      } else {\r\n        if (success) {\r\n          onConfirm(reviews.values);\r\n        } else {\r\n          setReviews((prev) => ({\r\n            ...prev,\r\n            errors: validator.errors,\r\n          }));\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <ToastNotificationContainer />\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={style}>\r\n          <Box\r\n            sx={{\r\n              backgroundColor: \"#EEEEEE\",\r\n              p: 2,\r\n              borderRadius: 3,\r\n              boxShadow: 5,\r\n            }}\r\n          >\r\n            <Typography sx={{ mb: 2, fontSize: 18, fontWeight: \"bold\" }}>\r\n              Review\r\n            </Typography>\r\n            <Box>\r\n              <Box sx={{ mb: 2 }}>\r\n                <Box sx={{ display: \"flex\" }}>\r\n                  <Rating\r\n                    name=\"rating\"\r\n                    value={parseInt(reviews.values.rating)}\r\n                    onChange={handleChange}\r\n                    getLabelText={getLabelText}\r\n                    onChangeActive={(event, newHover) => {\r\n                      setHover(newHover);\r\n                    }}\r\n                  />\r\n                  <Typography sx={{ ml: 2 }}>\r\n                    {labels[hover !== -1 ? hover : reviews.values.rating]}\r\n                  </Typography>\r\n                </Box>\r\n                <FormHelperText error sx={{ ml: 2 }}>\r\n                  {error}\r\n                </FormHelperText>\r\n              </Box>\r\n              <FormField\r\n                fullWidth\r\n                name=\"comment\"\r\n                label=\"Comment\"\r\n                placeholder=\"What can you say...\"\r\n                multiline\r\n                rows={4}\r\n                value={reviews.values.comment}\r\n                onChange={handleChange}\r\n                errors={reviews.errors}\r\n              />\r\n            </Box>\r\n          </Box>\r\n\r\n          <Box\r\n            align=\"right\"\r\n            sx={{ backgroundColor: \"#F4F5FB\", p: 2, borderRadius: 3, mt: 5 }}\r\n          >\r\n            <Button size=\"small\" variant=\"outlined\" onClick={handleClose}>\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              size=\"small\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              sx={{ ml: 1 }}\r\n              onClick={handleValidate}\r\n              disabled={loading}\r\n            >\r\n              {loading ? (\r\n                <CircularProgress\r\n                  size={24}\r\n                  sx={{ color: \"white\" }}\r\n                  thickness={5}\r\n                />\r\n              ) : (\r\n                \"Save\"\r\n              )}\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Modal>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default UpdateReview;\r\n"],"names":["props","errors","name","customError","rest","_objectWithoutProperties","_excluded","error","helperText","has","first","fieldProps","_objectSpread","value","_jsx","TextField","size","variant","ToastNotification","status","message","options","toast","ToastNotificationContainer","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","theme","draggableDirection","draggablePercent","style","top","left","transform","width","xs","md","bgcolor","border","boxShadow","p","validator","Reevalidate","rating","comment","labels","getLabelText","concat","open","ratingsData","handleClose","onConfirm","loading","_React$useState","useDispatch","React","_React$useState2","_slicedToArray","setError","_React$useState3","values","_React$useState4","reviews","setReviews","_React$useState5","_React$useState6","hover","setHover","prev","handleChange","e","target","_defineProperty","validate","then","success","_jsxs","Box","children","Modal","onClose","sx","backgroundColor","borderRadius","Typography","mb","fontSize","fontWeight","display","Rating","parseInt","onChange","onChangeActive","event","newHover","ml","FormHelperText","FormField","fullWidth","label","placeholder","multiline","rows","align","mt","Button","onClick","color","validateAll","disabled","CircularProgress","thickness"],"sourceRoot":""}