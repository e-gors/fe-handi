{"version":3,"file":"static/js/9455.0814b373.chunk.js","mappings":"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","sources":["components/ToastNotification.js","components/ToastNotificationContainer.js","components/options.js","modules/users/components/UploadProfileImage.js","utils/Http.js"],"sourcesContent":["import { toast } from \"react-toastify\";\r\n\r\nexport default function ToastNotification(status, message, options) {\r\n  if (status === \"success\") {\r\n    return toast.success(message, options);\r\n  }\r\n  return toast.error(message, options);\r\n}\r\n","import { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nexport default function ToastNotificationContainer() {\r\n  return (\r\n    <ToastContainer\r\n      position=\"top-right\"\r\n      autoClose={5000}\r\n      hideProgressBar={false}\r\n      newestOnTop={false}\r\n      closeOnClick\r\n      rtl={false}\r\n      pauseOnFocusLoss\r\n      draggable\r\n      pauseOnHover\r\n      theme=\"colored\"\r\n    />\r\n  );\r\n}\r\n","export const options = {\r\n  position: \"top-right\",\r\n  autoClose: 3000,\r\n  hideProgressBar: false,\r\n  draggable: true,\r\n  draggableDirection: \"x\" | \"y\",\r\n  draggablePercent: 60,\r\n  theme: \"colored\",\r\n};\r\n","import { Box, Button, CircularProgress, Typography } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport ToastNotification from \"../../../components/ToastNotification\";\r\nimport ToastNotificationContainer from \"../../../components/ToastNotificationContainer\";\r\nimport { options } from \"../../../components/options\";\r\nimport Http from \"../../../utils/Http\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { updateUser } from \"../../../redux/actions/userActions\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport UploadOutlinedIcon from \"@mui/icons-material/UploadOutlined\";\r\nimport { CropImage } from \"../../../utils/helpers\";\r\n\r\nconst styles = {\r\n  wrapper: { width: \"100%\", height: \"100%\" },\r\n  descriptionWrapper: {\r\n    width: { xs: \"100%\", sm: \"50%\", md: \"50%\" },\r\n    m: \"0 auto\",\r\n  },\r\n  descriptions: { fontSize: { xs: 12, md: 14 } },\r\n  description: { fontSize: \"inherit\" },\r\n  imageCropWrapper: {\r\n    position: \"relative\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    minHeight: 260,\r\n    p: 2,\r\n\r\n    img: {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      objectFit: \"contain\",\r\n      objectPosition: \"center\",\r\n    },\r\n  },\r\n  buttonsWrapper: { backgroundColor: \"#F4F5FB\", p: 2, borderRadius: 3, mt: 5 },\r\n};\r\n\r\nfunction UploadProfileImage(props) {\r\n  const { handleClose, onConfirm } = props;\r\n  const dispatch = useDispatch();\r\n\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [image, setImage] = React.useState(null);\r\n  const [crop, setCrop] = React.useState({\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  const [zoom, setZoom] = React.useState(1);\r\n  const [croppedArea, setCroppedArea] = React.useState(null);\r\n\r\n  const handleFileChange = (event) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = (event) => {\r\n        setImage(event.target.result);\r\n      };\r\n    }\r\n    return;\r\n  };\r\n\r\n  const handleCropChange = (crop, zoom) => {\r\n    setCrop(crop);\r\n    setZoom(zoom);\r\n  };\r\n\r\n  const onCropComplete = (croppedAreaPercentage, croppedAreaPixels) => {\r\n    setCroppedArea(croppedAreaPixels);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const croppedImg = await CropImage(image, croppedArea);\r\n      const formData = new FormData();\r\n      formData.append(\"profile_img\", croppedImg);\r\n\r\n      const res = await Http.post(\"/upload/profile-image\", formData, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      });\r\n\r\n      if (res.data.code === 200) {\r\n        setImage(null);\r\n        dispatch(updateUser(res.data.user));\r\n        ToastNotification(\"success\", res.data.message, options);\r\n        onConfirm();\r\n      } else {\r\n        ToastNotification(\"error\", res.data.message, options);\r\n      }\r\n    } catch (error) {\r\n      if (error.response.status === 413) {\r\n        ToastNotification(\r\n          \"error\",\r\n          \"Image is too large. Please choose another image!\",\r\n          options\r\n        );\r\n      } else {\r\n        ToastNotification(\"error\", error.message, options);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={styles.wrapper}>\r\n      <ToastNotificationContainer />\r\n      <form encType=\"multipart/form-data\">\r\n        <input\r\n          accept=\"image/*\"\r\n          id=\"image-upload\"\r\n          type=\"file\"\r\n          style={{ display: \"none\" }}\r\n          onChange={handleFileChange}\r\n          required\r\n        />\r\n      </form>\r\n\r\n      {!image && (\r\n        <Box>\r\n          <Box sx={styles.descriptionWrapper}>\r\n            <Box sx={styles.descriptions}>\r\n              <Typography component=\"li\" sx={styles.description}>\r\n                Recommended dimensions 400 x 400 px\r\n              </Typography>\r\n              <Typography component=\"li\" sx={styles.description}>\r\n                JPG, JPEG, PNG\r\n              </Typography>\r\n              <Typography component=\"li\" sx={styles.description}>\r\n                Max size: 5mb\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n          <Box sx={{ mt: 4 }} align=\"center\">\r\n            <label htmlFor=\"image-upload\">\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                component=\"span\"\r\n                startIcon={<UploadOutlinedIcon />}\r\n                sx={{ mt: 2 }}\r\n              >\r\n                choose an image\r\n              </Button>\r\n            </label>\r\n          </Box>\r\n        </Box>\r\n      )}\r\n\r\n      {image && (\r\n        <Box sx={styles.imageCropWrapper}>\r\n          <Cropper\r\n            image={image}\r\n            crop={crop}\r\n            aspect={1}\r\n            onCropChange={handleCropChange}\r\n            cropShape=\"rect\"\r\n            showGrid\r\n            zoomWithScroll\r\n            restrictPosition\r\n            zoom={zoom}\r\n            onZoomChange={setZoom}\r\n            dragCrop\r\n            dragImage={false}\r\n            pinchToZoom={false}\r\n            allowCropOutOfBounds={false}\r\n            onCropComplete={onCropComplete}\r\n            interaction={{\r\n              dragCrop: true,\r\n              pinchToZoom: false,\r\n              dragImage: false,\r\n            }}\r\n          />\r\n        </Box>\r\n      )}\r\n\r\n      {image && (\r\n        <Box sx={{ mt: 1 }} align=\"center\">\r\n          <label htmlFor=\"image-upload\">\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"primary\"\r\n              component=\"span\"\r\n              startIcon={<UploadOutlinedIcon />}\r\n              sx={{ mt: 2 }}\r\n            >\r\n              choose another image\r\n            </Button>\r\n          </label>\r\n        </Box>\r\n      )}\r\n\r\n      <Box align=\"right\" sx={styles.buttonsWrapper}>\r\n        <Button size=\"small\" variant=\"outlined\" onClick={handleClose}>\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          size=\"small\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          sx={{ ml: 1 }}\r\n          onClick={handleSubmit}\r\n          disabled={loading}\r\n        >\r\n          {loading ? (\r\n            <CircularProgress size={24} sx={{ color: \"white\" }} thickness={5} />\r\n          ) : (\r\n            \"Save\"\r\n          )}\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default UploadProfileImage;\r\n","import axios from \"axios\";\r\n\r\nconst Http = axios.create();\r\n\r\nHttp.defaults.baseURL = process.env.REACT_APP_API_DOMAIN;\r\nHttp.defaults.headers.common[\"Accept\"] = \"application/json\";\r\nHttp.defaults.headers.common[\"Content-Type\"] = \"application/json\";\r\nHttp.defaults.headers.common[\"Authorization\"] = `Bearer ${localStorage.getItem(\r\n  \"accessToken\"\r\n)}`;\r\n\r\nHttp.interceptors.response.use(\r\n  function (response) {\r\n    return response;\r\n  },\r\n  function (error) {\r\n    if (error.message === \"Network Error\") {\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    switch (error.response && error.response.status) {\r\n      case 401:\r\n        localStorage.removeItem(\"accessToken\");\r\n        window.location.href = \"/login\";\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default Http;\r\n"],"names":["ToastNotification","status","message","options","toast","ToastNotificationContainer","_jsx","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","theme","draggableDirection","draggablePercent","styles","wrapper","width","height","descriptionWrapper","xs","sm","md","m","descriptions","fontSize","description","imageCropWrapper","minHeight","p","img","objectFit","objectPosition","buttonsWrapper","backgroundColor","borderRadius","mt","props","handleClose","onConfirm","dispatch","useDispatch","_React$useState","React","_React$useState2","_slicedToArray","loading","setLoading","_React$useState3","_React$useState4","image","setImage","_React$useState5","x","y","_React$useState6","crop","setCrop","_React$useState7","_React$useState8","zoom","setZoom","_React$useState9","_React$useState10","croppedArea","setCroppedArea","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","croppedImg","formData","res","wrap","_context","prev","next","CropImage","sent","FormData","append","Http","headers","data","code","updateUser","user","t0","response","finish","stop","apply","arguments","_jsxs","Box","sx","children","encType","accept","id","type","style","display","onChange","event","file","target","files","reader","FileReader","readAsDataURL","onload","result","required","Typography","component","align","htmlFor","Button","variant","color","startIcon","UploadOutlinedIcon","Cropper","aspect","onCropChange","cropShape","showGrid","zoomWithScroll","restrictPosition","onZoomChange","dragCrop","dragImage","pinchToZoom","allowCropOutOfBounds","onCropComplete","croppedAreaPercentage","croppedAreaPixels","interaction","size","onClick","ml","disabled","CircularProgress","thickness","axios","defaults","baseURL","process","common","concat","localStorage","getItem","interceptors","use","error","Promise","reject","removeItem","window","location","href"],"sourceRoot":""}