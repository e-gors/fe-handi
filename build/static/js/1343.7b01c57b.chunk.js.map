{"version":3,"file":"static/js/1343.7b01c57b.chunk.js","mappings":"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","sources":["components/DataTable.js"],"sourcesContent":["import {\r\n  Box,\r\n  CircularProgress,\r\n  Grid,\r\n  IconButton,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport React, { memo, useState } from \"react\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\r\nimport DeleteSweepIcon from \"@mui/icons-material/DeleteSweep\";\r\nimport AddTaskIcon from \"@mui/icons-material/AddTask\";\r\n\r\nfunction DataTable(props) {\r\n  const {\r\n    data = [],\r\n    columns = [],\r\n    onChangePage,\r\n    rowsPerPage,\r\n    onRowsChangePage,\r\n    withPagination = false,\r\n    withNumber,\r\n    onDelete,\r\n    onEdit,\r\n    onComplete,\r\n    onRevoked,\r\n    onWithdrawn,\r\n    onCancel,\r\n    onView,\r\n    loading,\r\n    ...rest\r\n  } = props;\r\n\r\n  const [selectedItem, setSelectedItem] = useState({});\r\n\r\n  const getCellValue = (item, col) => {\r\n    const keys = (col.name && col.name.split(\".\")) || [];\r\n\r\n    if (keys.length === 0) {\r\n      return \"\";\r\n    }\r\n\r\n    let value = item;\r\n\r\n    keys.forEach((key) => {\r\n      value = value[key] !== undefined && value[key] !== null ? value[key] : \"\";\r\n    });\r\n\r\n    // Check if the value is an array (multiple locations)\r\n    if (Array.isArray(value)) {\r\n      // Join the locations with a comma\r\n      value = value.join(\", \");\r\n    }\r\n\r\n    return value;\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    onChangePage && onChangePage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    onRowsChangePage && onRowsChangePage(event.target.value);\r\n  };\r\n\r\n  const paginationProps = {\r\n    rowsPerPageOptions: [10, 20, 50, 100, 250],\r\n    component: \"div\",\r\n    count: 1,\r\n    rowsPerPage: 10,\r\n    page: 1,\r\n    ...rest,\r\n  };\r\n\r\n  const handleView = (item) => {\r\n    setSelectedItem(item);\r\n    onView && onView(item);\r\n  };\r\n  const handleComplete = (item) => {\r\n    setSelectedItem(item);\r\n    onComplete && onComplete(item);\r\n  };\r\n  const handleRevoked = (item) => {\r\n    setSelectedItem(item);\r\n    onRevoked && onRevoked(item);\r\n  };\r\n  const handleEdit = (item) => {\r\n    setSelectedItem(item);\r\n    onEdit && onEdit(item);\r\n  };\r\n  const handleDelete = (item) => {\r\n    setSelectedItem(item);\r\n    onDelete && onDelete(item);\r\n  };\r\n\r\n  return (\r\n    <Box {...rest} sx={{ border: \"1px solid #BEBEBE\", boxShadow: 10 }}>\r\n      <TableContainer>\r\n        <Table stickyHeader>\r\n          <TableHead\r\n            sx={{\r\n              \"& th\": {\r\n                color: \"black\",\r\n                backgroundColor: \"#E3E4E9\",\r\n                fontWeight: \"bold\",\r\n              },\r\n            }}\r\n          >\r\n            <TableRow>\r\n              {(onDelete ||\r\n                onComplete ||\r\n                onEdit ||\r\n                onView ||\r\n                onRevoked ||\r\n                withNumber) && (\r\n                <TableCell size=\"small\" align=\"center\">\r\n                  #\r\n                </TableCell>\r\n              )}\r\n              {columns.map((column, index) => (\r\n                <TableCell\r\n                  size=\"small\"\r\n                  key={index}\r\n                  sx={{ whiteSpace: \"noWrap\" }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {!loading &&\r\n              data.map((item, itemIndex) => (\r\n                <TableRow key={itemIndex}>\r\n                  {(onDelete ||\r\n                    onEdit ||\r\n                    onView ||\r\n                    onComplete ||\r\n                    onRevoked ||\r\n                    withNumber) && (\r\n                    <TableCell\r\n                      size=\"small\"\r\n                      align=\"center\"\r\n                      sx={{ whiteSpace: \"noWrap\" }}\r\n                    >\r\n                      {withNumber && itemIndex + 1}\r\n                      {onView && (\r\n                        <Tooltip title=\"View\" arrow>\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            color=\"primary\"\r\n                            onClick={() => handleView(item)}\r\n                          >\r\n                            <VisibilityIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      )}\r\n                      {onComplete && (\r\n                        <Tooltip title=\"Complete contract?\" arrow>\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            color=\"primary\"\r\n                            onClick={() => handleComplete(item)}\r\n                          >\r\n                            <AddTaskIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      )}\r\n                      {onRevoked && (\r\n                        <Tooltip title=\"Cancel\" arrow>\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            sx={{ color: \"gray\" }}\r\n                            onClick={() => handleRevoked(item)}\r\n                          >\r\n                            <DeleteSweepIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      )}\r\n                      {onEdit && (\r\n                        <Tooltip title=\"Edit\" arrow>\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            sx={{ color: \"#00c853\" }}\r\n                            onClick={() => handleEdit(item)}\r\n                          >\r\n                            <EditIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      )}\r\n                      {onDelete && (\r\n                        <Tooltip title=\"Delete\" arrow>\r\n                          <IconButton\r\n                            size=\"small\"\r\n                            color=\"error\"\r\n                            onClick={() => handleDelete(item)}\r\n                          >\r\n                            <DeleteIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      )}\r\n                    </TableCell>\r\n                  )}\r\n\r\n                  {columns.map((col, colIndex) => {\r\n                    const cellValue = getCellValue(item, col);\r\n                    const isStatusColumn = col.name === \"status\"; // Assuming \"status\" is the column identifier\r\n\r\n                    let cellColor = \"inherit\";\r\n                    if (isStatusColumn) {\r\n                      if (cellValue === \"pending\") {\r\n                        cellColor = \"red\";\r\n                      } else if (\r\n                        cellValue === \"accepted\" ||\r\n                        cellValue === \"in progress\" ||\r\n                        cellValue === \"posted\"\r\n                      ) {\r\n                        cellColor = \"green\";\r\n                      } else if (cellValue === \"completed\") {\r\n                        cellColor = \"blue\";\r\n                      } else if (cellValue === \"declined\") {\r\n                        cellColor = \"orange\";\r\n                      } else if (cellValue === \"withdrawn\") {\r\n                        cellColor = \"gray\";\r\n                      }\r\n                    }\r\n                    return (\r\n                      <TableCell\r\n                        size=\"small\"\r\n                        key={`${colIndex}-${col.name}`}\r\n                        sx={{\r\n                          whiteSpace: \"noWrap\",\r\n                          fontWeight: isStatusColumn ? \"bold\" : \"normal\",\r\n                          color: cellColor,\r\n                        }}\r\n                      >\r\n                        {col.customBodyRender\r\n                          ? col.customBodyRender(\r\n                              cellValue,\r\n                              item,\r\n                              colIndex,\r\n                              itemIndex\r\n                            )\r\n                          : cellValue}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              ))}\r\n          </TableBody>\r\n        </Table>\r\n        {!loading && data.length === 0 && (\r\n          <Typography align=\"center\">No item(s) at the moment</Typography>\r\n        )}\r\n      </TableContainer>\r\n      {withPagination && (\r\n        <TablePagination\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n          {...paginationProps}\r\n        />\r\n      )}\r\n      {loading && (\r\n        <Grid container justifyContent=\"center\">\r\n          <CircularProgress />\r\n        </Grid>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default memo(DataTable);\r\n"],"names":["DataTable","props","_props$data","data","_props$columns","columns","onChangePage","onRowsChangePage","rowsPerPage","_props$withPagination","withPagination","withNumber","onDelete","onEdit","onComplete","onRevoked","onView","onWithdrawn","onCancel","loading","rest","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","setSelectedItem","paginationProps","_objectSpread","rowsPerPageOptions","component","count","page","_jsxs","Box","sx","border","boxShadow","children","TableContainer","Table","stickyHeader","_jsx","TableHead","color","backgroundColor","fontWeight","TableRow","TableCell","size","align","map","column","index","whiteSpace","label","TableBody","item","itemIndex","Tooltip","title","arrow","IconButton","onClick","handleView","VisibilityIcon","handleComplete","AddTaskIcon","handleRevoked","DeleteSweepIcon","handleEdit","EditIcon","handleDelete","DeleteIcon","col","colIndex","cellValue","keys","name","split","length","value","forEach","key","undefined","Array","isArray","join","getCellValue","isStatusColumn","cellColor","customBodyRender","concat","Typography","TablePagination","onPageChange","event","newPage","onRowsPerPageChange","target","Grid","container","justifyContent","CircularProgress","memo"],"sourceRoot":""}